/**
 * LoopBack Application
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FullstrideGame from '../model/FullstrideGame';
import InlineResponse200 from '../model/InlineResponse200';

/**
* FullstrideGameController service.
* @module api/FullstrideGameControllerApi
* @version 1.0.0
*/
export default class FullstrideGameControllerApi {

    /**
    * Constructs a new FullstrideGameControllerApi. 
    * @alias module:api/FullstrideGameControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fullstrideGameControllerCount operation.
     * @callback module:api/FullstrideGameControllerApi~fullstrideGameControllerCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Object} opts.where 
     * @param {module:api/FullstrideGameControllerApi~fullstrideGameControllerCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    fullstrideGameControllerCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/fullstride-games/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullstrideGameControllerCreate operation.
     * @callback module:api/FullstrideGameControllerApi~fullstrideGameControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullstrideGame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/FullstrideGame} opts.fullstrideGame 
     * @param {module:api/FullstrideGameControllerApi~fullstrideGameControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullstrideGame}
     */
    fullstrideGameControllerCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['fullstrideGame'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FullstrideGame;
      return this.apiClient.callApi(
        '/fullstride-games', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullstrideGameControllerDeleteById operation.
     * @callback module:api/FullstrideGameControllerApi~fullstrideGameControllerDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/FullstrideGameControllerApi~fullstrideGameControllerDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fullstrideGameControllerDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullstrideGameControllerDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fullstride-games/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullstrideGameControllerFind operation.
     * @callback module:api/FullstrideGameControllerApi~fullstrideGameControllerFindCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FullstrideGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Object} opts.filter 
     * @param {module:api/FullstrideGameControllerApi~fullstrideGameControllerFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FullstrideGame>}
     */
    fullstrideGameControllerFind(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FullstrideGame];
      return this.apiClient.callApi(
        '/fullstride-games', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullstrideGameControllerFindById operation.
     * @callback module:api/FullstrideGameControllerApi~fullstrideGameControllerFindByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullstrideGame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/FullstrideGameControllerApi~fullstrideGameControllerFindByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullstrideGame}
     */
    fullstrideGameControllerFindById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullstrideGameControllerFindById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FullstrideGame;
      return this.apiClient.callApi(
        '/fullstride-games/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullstrideGameControllerReplaceById operation.
     * @callback module:api/FullstrideGameControllerApi~fullstrideGameControllerReplaceByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/FullstrideGame} opts.fullstrideGame 
     * @param {module:api/FullstrideGameControllerApi~fullstrideGameControllerReplaceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fullstrideGameControllerReplaceById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['fullstrideGame'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullstrideGameControllerReplaceById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fullstride-games/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullstrideGameControllerUpdateAll operation.
     * @callback module:api/FullstrideGameControllerApi~fullstrideGameControllerUpdateAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Object} opts.where 
     * @param {module:model/FullstrideGame} opts.fullstrideGame 
     * @param {module:api/FullstrideGameControllerApi~fullstrideGameControllerUpdateAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    fullstrideGameControllerUpdateAll(opts, callback) {
      opts = opts || {};
      let postBody = opts['fullstrideGame'];

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/fullstride-games', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullstrideGameControllerUpdateById operation.
     * @callback module:api/FullstrideGameControllerApi~fullstrideGameControllerUpdateByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/FullstrideGame} opts.fullstrideGame 
     * @param {module:api/FullstrideGameControllerApi~fullstrideGameControllerUpdateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fullstrideGameControllerUpdateById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['fullstrideGame'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullstrideGameControllerUpdateById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fullstride-games/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
